import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class MyCallable implements Callable<Integer> {
    private int num;

    MyCallable(int num) {
        this.num = num;
    }

    public Integer call() throws Exception {
        int sum = 0;
        for (int i = 1; i <= num; i++) {
            sum += i;
            Thread.sleep(100); // Pause for 100 milliseconds
        }
        return sum;
    }

    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(2);
        Future<Integer> future1 = executor.submit(new MyCallable(5));
        Future<Integer> future2 = executor.submit(new MyCallable(10));

        try {
            System.out.println("Result of future1: " + future1.get());
            System.out.println("Result of future2: " + future2.get());
        } catch (InterruptedException | ExecutionException e) {
            System.out.println(e);
        }

        executor.shutdown();
    }
}
