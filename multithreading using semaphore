import java.util.concurrent.Semaphore;

class MyThread extends Thread {
    private Semaphore semaphore;

    MyThread(Semaphore semaphore, String name) {
        super(name);
        this.semaphore = semaphore;
    }

    public void run() {
        try {
            System.out.println(Thread.currentThread().getName() + " is waiting for a permit");
            semaphore.acquire();
            System.out.println(Thread.currentThread().getName() + " gets a permit");

            for (int i = 1; i <= 5; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
                Thread.sleep(500); // Pause for 500 milliseconds
            }

            System.out.println(Thread.currentThread().getName() + " releases the permit");
            semaphore.release();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Semaphore semaphore = new Semaphore(2);

        MyThread t1 = new MyThread(semaphore, "Thread-1");
        MyThread t2 = new MyThread(semaphore, "Thread-2");
        MyThread t3 = new MyThread(semaphore, "Thread-3");

        t1.start();
        t2.start();
        t3.start();
    }
}
